# app/services/reddit/auth.py
import subprocess
import time
import secrets
import string
import os
import random
import math

import pyautogui
import pyperclip
import pygetwindow as gw
from fastapi import HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional


# ==============================================================================
# --- Modelos de Datos (Pydantic) ---
# ==============================================================================

class AutomationRequest(BaseModel):
    """Modelo para la solicitud de inicio de la automatizaci√≥n de registro."""
    url: str = Field(..., description="URL a la que se abrir√° el navegador.", example="https://www.reddit.com/register/")
    email: str = Field(..., description="Correo electr√≥nico para el registro.", example="tu.correo@ejemplo.com")


class LoginAndBrowseRequest(BaseModel):
    """Modelo para la solicitud de login y navegaci√≥n."""
    url: str = Field(..., description="URL de login.", example="https://www.reddit.com/login")
    username: str = Field(..., description="Nombre de usuario para el login.")
    password: str = Field(..., description="Contrase√±a para el login.")
    duration_seconds: int = Field(3600, description="Duraci√≥n total de la sesi√≥n de navegaci√≥n en segundos.")
    window_title: str = Field("Reddit", description="T√≠tulo de la ventana del navegador a buscar.")


class ElementLocator(BaseModel):
    """Define las propiedades para localizar un elemento en la pantalla."""
    images: List[str] = Field(..., description="Lista de nombres de archivo de imagen para buscar.")
    confidence: float = Field(0.85, description="Nivel de confianza para la coincidencia de im√°genes.")
    wait_time: int = Field(0, description="Tiempo de espera en segundos antes de buscar.")
    attempts: int = Field(1, description="N√∫mero de intentos para encontrar el elemento.")


# ==============================================================================
# --- Clase de Servicio de Automatizaci√≥n (L√≥gica de Negocio) ---
# ==============================================================================

class AutomationService:
    """
    Servicio para manejar las tareas de automatizaci√≥n de la GUI para Reddit.
    Contiene m√©todos para registro, login y navegaci√≥n.
    """

    def __init__(self, chrome_path: str = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"):
        """Inicializa el servicio con la ruta a Chrome."""
        self.chrome_path = chrome_path

    # --- M√©todos Generales de Automatizaci√≥n ---

    def open_chrome_incognito(self, url: str):
        """Abre una nueva ventana de Chrome en modo inc√≥gnito en la URL especificada."""
        try:
            subprocess.Popen([self.chrome_path, "--incognito", url])
            print(f"üåê Chrome abierto en modo inc√≥gnito: {url}")
        except FileNotFoundError:
            print(f"‚ùå No se encontr√≥ Chrome en la ruta: {self.chrome_path}")
            raise HTTPException(status_code=500, detail="No se encontr√≥ el ejecutable de Chrome.")

    def find_element_on_screen(self, locator: ElementLocator) -> Optional[tuple]:
        """Busca un elemento en la pantalla usando una o m√°s im√°genes."""
        for attempt in range(locator.attempts):
            if locator.wait_time > 0:
                time.sleep(locator.wait_time)
            
            for image in locator.images:
                try:
                    image_name = os.path.basename(image)
                    print(f"üîç (Intento {attempt + 1}/{locator.attempts}) Buscando con: {image_name}")
                    location = pyautogui.locateOnScreen(image, confidence=locator.confidence)
                    if location:
                        print(f"‚úÖ Elemento encontrado con {image_name} en: {location}")
                        return location
                except Exception as e:
                    print(f"‚ö†Ô∏è No se encontr√≥ la imagen {image} en este intento. Error: {e}")
            
            if locator.attempts > 1:
                pyautogui.scroll(-200)
                time.sleep(1)

        print(f"‚ùå Elemento no encontrado con ninguna de las im√°genes: {locator.images}")
        return None

    def click_on_location(self, location: tuple):
        """Mueve el cursor al centro de una ubicaci√≥n y hace clic."""
        center = pyautogui.center(location)
        pyautogui.moveTo(center, duration=0.25)
        pyautogui.click()
        print(f"üñ±Ô∏è Clic realizado en: {center}")

    def find_and_click(self, locator: ElementLocator) -> bool:
        """Busca un elemento y hace clic en √©l si lo encuentra."""
        location = self.find_element_on_screen(locator)
        if location:
            self.click_on_location(location)
            return True
        return False

    def type_text(self, text: str, interval: float = 0.05):
        """Escribe texto usando el portapapeles para eficiencia."""
        try:
            original_clipboard = pyperclip.paste()
            pyperclip.copy(text)
            pyautogui.hotkey('ctrl', 'v')
            pyperclip.copy(original_clipboard)
            print(f"‚å®Ô∏è Texto pegado: '{text}'")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al pegar texto, usando escritura manual: {e}")
            pyautogui.write(text, interval=interval)

    def find_and_type(self, locator: ElementLocator, text: str):
        """Busca un campo, hace clic y escribe texto en √©l."""
        if self.find_and_click(locator):
            self.type_text(text)
        else:
            print(f"‚ùå No se encontr√≥ el campo para escribir: {locator.images}")
            raise RuntimeError(f"Fallo al buscar el campo para escribir.")

    # --- M√©todos Espec√≠ficos para Registro ---

    def generate_password(self, length: int = 12) -> str:
        """Genera una contrase√±a segura."""
        characters = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
        password = ''.join(secrets.choice(characters) for _ in range(length))
        print(f"üîí Contrase√±a generada: {'*' * length}")
        return password

    def get_username_from_field(self, locator: ElementLocator) -> Optional[str]:
        """Obtiene el texto de un campo de nombre de usuario."""
        location = self.find_element_on_screen(locator)
        if location:
            self.click_on_location(location)
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.3)
            pyautogui.hotkey('ctrl', 'c')
            time.sleep(0.3)
            username = pyperclip.paste()
            print(f"üìã Nombre de usuario obtenido: '{username}'")
            return username
        print("‚ùå No se encontr√≥ el campo de usuario.")
        return None

    # --- M√©todos para Navegaci√≥n "Humana" ---

    def _move_mouse_humanly(self, x_dest, y_dest):
        """Mueve el rat√≥n a un destino usando una trayectoria curva (B√©zier)."""
        x_ini, y_ini = pyautogui.position()
        dist = math.hypot(x_dest - x_ini, y_dest - y_ini)
        duration = max(0.3, min(1.5, dist / 1000))
        offset = random.randint(-100, 100)
        ctrl_x = (x_ini + x_dest) / 2 + offset
        ctrl_y = (y_ini + y_dest) / 2 - offset
        steps = max(10, int(dist / 25))

        for i in range(steps + 1):
            t = i / steps
            x = (1 - t)**2 * x_ini + 2 * (1 - t) * t * ctrl_x + t**2 * x_dest
            y = (1 - t)**2 * y_ini + 2 * (1 - t) * t * ctrl_y + t**2 * y_dest
            pyautogui.moveTo(x, y, duration=duration / steps)

    def find_and_click_humanly(self, locator: ElementLocator) -> bool:
        """Busca un elemento, mueve el rat√≥n de forma humana y hace clic."""
        for attempt in range(locator.attempts):
            for image in locator.images:
                try:
                    pos = pyautogui.locateCenterOnScreen(image, confidence=locator.confidence)
                    if pos:
                        print(f"‚úÖ Elemento encontrado con {os.path.basename(image)}.")
                        self._move_mouse_humanly(pos.x, pos.y)
                        pyautogui.click()
                        time.sleep(1)
                        return True
                except pyautogui.ImageNotFoundException:
                    continue
            if locator.wait_time > 0:
                print(f"Retraso de {locator.wait_time}s antes del siguiente intento.")
                time.sleep(locator.wait_time)
        print(f"‚ùå No se encontr√≥ el elemento con ninguna de las im√°genes: {locator.images}")
        return False
        
    def type_text_humanly(self, text: str):
        """Escribe texto car√°cter por car√°cter para simular un humano."""
        print(f"‚å®Ô∏è Escribiendo texto de forma humana: '{text}'")
        for char in text:
            if char.isupper() or char in '~!@#$%^&*()_+{}|:"<>?':
                pyautogui.keyDown('shift')
                pyautogui.press(char.lower())
                pyautogui.keyUp('shift')
            else:
                pyautogui.press(char)
            time.sleep(random.uniform(0.05, 0.2))

    def get_and_focus_window(self, title: str) -> Optional[gw.Win32Window]:
        """Busca, activa y maximiza una ventana por su t√≠tulo."""
        print(f"üîç Buscando ventana con el t√≠tulo '{title}'...")
        try:
            windows = gw.getWindowsWithTitle(title)
            if windows:
                window = windows[0]
                if window.isMinimized:
                    window.restore()
                window.maximize()
                window.activate()
                time.sleep(1)
                print("‚úÖ Ventana encontrada y enfocada.")
                return window
            else:
                print("‚ùå No se encontr√≥ la ventana del navegador.")
                return None
        except Exception as e:
            print(f"‚ùå Error al buscar la ventana: {e}")
            return None

    def _perform_random_human_action(self, window: gw.Win32Window):
        """Realiza una acci√≥n aleatoria para romper la monoton√≠a."""
        action = random.choice(['pause_long', 'move_subtle', 'scroll_corrective', 'pause_short'])
        
        if action == 'pause_long':
            duration = random.uniform(8, 15)
            print(f"üßò‚Äç‚ôÇÔ∏è Interrupci√≥n: Pausa larga de {duration:.1f}s.")
            time.sleep(duration)
        elif action == 'move_subtle':
            print("üñ±Ô∏è Interrupci√≥n: Movimiento sutil del rat√≥n.")
            x, y = pyautogui.position()
            dx = random.randint(-150, 150)
            dy = random.randint(-150, 150)
            target_x = max(window.left, min(x + dx, window.left + window.width))
            target_y = max(window.top, min(y + dy, window.top + window.height))
            self._move_mouse_humanly(target_x, target_y)
        elif action == 'scroll_corrective':
            print("Interrupci√≥n: Scroll hacia arriba.")
            pyautogui.scroll(random.randint(200, 400))
            time.sleep(random.uniform(2, 4))
        else: # Pausa corta
            duration = random.uniform(3, 6)
            print(f"üßò Interrupci√≥n: Pausa corta de {duration:.1f}s.")
            time.sleep(duration)

    def browse_with_scroll(self, window: gw.Win32Window, duration_seconds: int, human_action_prob: float = 0.05):
        """Orquesta la navegaci√≥n con scroll fluido y acciones humanas."""
        print("\n--- üöÄ Iniciando Proceso de Navegaci√≥n Humana ---")
        start_time = time.time()

        while time.time() - start_time < duration_seconds:
            if not gw.getWindowsWithTitle(window.title):
                print("‚ùå La ventana del navegador se cerr√≥. Finalizando.")
                break
            window.activate()

            pyautogui.scroll(-random.randint(40, 70))
            time.sleep(random.uniform(0.4, 1.2))

            if random.random() < human_action_prob:
                self._perform_random_human_action(window)

        print("\nüèÅ Tiempo de simulaci√≥n finalizado.")


# ==============================================================================
# --- Orquestadores de Flujo ---
# ==============================================================================

def run_registration_flow(email: str, url: str):
    """Ejecuta el flujo completo de registro de Reddit."""
    service = AutomationService()
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.normpath(os.path.join(script_dir, '..', '..', '..'))
    img_folder = os.path.join(project_root, 'img')
    print(f"‚úÖ Usando carpeta de im√°genes: {img_folder}")
    
    try:
        service.open_chrome_incognito(url)
        time.sleep(15)

        email_locator = ElementLocator(images=[os.path.join(img_folder, "correo_dark.png"), os.path.join(img_folder, "correo_light.png")], attempts=5)
        service.find_and_type(email_locator, email)

        continue_locator = ElementLocator(images=[os.path.join(img_folder, "continuar1.png"), os.path.join(img_folder, "continuar1_ligh.png")], attempts=10, wait_time=1)
        if not service.find_and_click(continue_locator):
            raise RuntimeError("No se pudo hacer clic en el primer 'Continuar'.")

        skip_locator = ElementLocator(images=[os.path.join(img_folder, "saltar.png"), os.path.join(img_folder, "saltar_ligh.png")], attempts=5, wait_time=2)
        service.find_and_click(skip_locator) # Es opcional, no aborta si falla

        user_locator = ElementLocator(images=[os.path.join(img_folder, "usuario.png"), os.path.join(img_folder, "usuario_ligh.png")], attempts=5, wait_time=2)
        username = service.get_username_from_field(user_locator)
        if not username:
            raise RuntimeError("No se pudo obtener el nombre de usuario.")

        password_locator = ElementLocator(images=[os.path.join(img_folder, "password_dark.png")], attempts=5, wait_time=2)
        password = service.generate_password()
        service.find_and_type(password_locator, password)

        if not service.find_and_click(continue_locator):
            raise RuntimeError("No se pudo hacer clic en el segundo 'Continuar'.")
        
        service.find_and_click(skip_locator)

        interest_locator = ElementLocator(images=[os.path.join(img_folder, "interes14.png")], attempts=10, wait_time=5)
        service.find_and_click(interest_locator)

        if not service.find_and_click(continue_locator):
            print("‚ö†Ô∏è No se pudo hacer clic en el 'Continuar' final, pero el proceso principal pudo haber funcionado.")
        
        print("\n‚úÖ Proceso de registro finalizado.")
        print(f"üìÑ Datos guardados: Usuario='{username}', Contrase√±a='{password}'")

    except Exception as e:
        print(f"\nüö® ERROR en el flujo de registro: {e}. Proceso abortado.")


def run_login_and_browse_flow(username: str, password: str, url: str, duration: int, window_title: str):
    """Ejecuta el flujo completo de login y navegaci√≥n."""
    service = AutomationService()

    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.normpath(os.path.join(script_dir, '..', '..', '..'))
    img_folder = os.path.join(project_root, 'img')
    print(f"‚úÖ Usando carpeta de im√°genes: {img_folder}")

    try:
        service.open_chrome_incognito(url)
        time.sleep(5)

        active_window = service.get_and_focus_window(window_title)
        if not active_window:
            raise RuntimeError("No se pudo encontrar la ventana del navegador.")

        print("\n--- Iniciando Proceso de Login ---")
        
        email_locator = ElementLocator(images=[os.path.join(img_folder, "correo_dark.png"), os.path.join(img_folder, "correo_light.png")])
        if not service.find_and_click_humanly(email_locator):
            raise RuntimeError("No se encontr√≥ el campo de usuario.")
        service.type_text_humanly(username)

        password_locator = ElementLocator(images=[os.path.join(img_folder, "password_dark.png"), os.path.join(img_folder, "password_light.png")])
        if not service.find_and_click_humanly(password_locator):
            raise RuntimeError("No se encontr√≥ el campo de contrase√±a.")
        service.type_text_humanly(password)

        login_locator = ElementLocator(images=[os.path.join(img_folder, "start_dark.png"), os.path.join(img_folder, "start_light.png")])
        if not service.find_and_click_humanly(login_locator):
            raise RuntimeError("No se encontr√≥ el bot√≥n de login.")
        
        print("‚úÖ Login completado. La navegaci√≥n comenzar√° en 5 segundos.")
        time.sleep(5)
        
        service.browse_with_scroll(active_window, duration)

        print("\n‚úÖ Proceso de login y navegaci√≥n finalizado.")

    except Exception as e:
        print(f"\nüö® ERROR en el flujo de login y navegaci√≥n: {e}. Proceso abortado.")